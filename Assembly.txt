						
vars: RIron, RCopper, RFurnace, RMining, RCrafting, amount, time, crafterspeed(cs), defaulttime(or dtime), 
crafternumber(cn)(eg: if it was Assembling Machine 2, then the number would be 2), var1, var2, var3, var4, var5  	

SP1

default values
----------------------
Time to make: 4 seconds							
1 x Science Pack 1 (1 x Assembling machine 3)							
	1 x Copper Plate (0.44 x Electric Furnace)						
		1 x Copper Ore (0.5 x Electric Mining Drill)					
	1 x Iron Gear Wheel (0.1 x Assembling machine 3)						
		1 x Iron Plate (0.44 x Electric Furnace)					
			1 x Iron Ore (0.5 x Electric Mining Drill)				
______________________________________________________
				      Qty | Time(sec)				Speed x || Machine
SP1 = Science Pack 1 || 1 || 5 || "1 x Copper Plate || 1 x Iron Gear Wheel"	0.75 <-- Assembling machine 2

--------------------------------------------------------------------------------------------------------------

    if (!time) {
        time = item.time / item.speedMultiplier;
    }

	//sets the value of "assemblers"
var assemblers = (amount/time) / (item.quantity / (item.time/item.speedMultiplier)

	//makes an array row and makes it as long as "offset" is greater than "i"
	    var row = [];
    for (var i = 0; i < offset; i++) {
        row[i] = "";
		
	//sets the value of the array "row" number "offset" to the rounded number of "assemblers"
row[offset] = Math.round(amount * 100) / 100 + 
" x " + item.name + " (" + Math.round(assemblers * 100) / 100 + " x " + item.machine + ")";

	//gets the value of the selected item and then runs a for loop as long as the "items" var is greater than the "i" var
function itemByName(name) {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Items");
    var items = sheet.getSheetValues(1, 2, sheet.getLastRow(), 1);
    for (var i = 0; i < items.length; i++) {
        if (items[i][0].toString().toLowerCase() == name.toLowerCase()) {
            return itemByRow(i + 1);
        }

	//gets values of the var "rowIndex", 2, 1, and 6 and puts it into the var "values".  Then, it checks parts of the 2nd part in the array, "values", has any input, if not then it returns null
	//next, to check if the "values" var in the 4th spot (because arrays start counting at 0) 
	//has a value, if so, it makes the var "ingredients" equal to "splitIngredients(values[3])" or the 4th spot (as mentioned earlier)
	//finally if none of these conditions worked out, then it makes the var "ingredients" equal to nothing
	//when all of the if conditions are run, then it returns each part in the array as follows:
    /*  name: values[0],
     *   quantity: values[1],
     *   time: values[2],
     *   ingredients: ingredients,
     *   speedMultiplier: values[4],
     */  machine: values[5]
function itemByRow(rowIndex) {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Items");
    var values = sheet.getSheetValues(rowIndex, 2, 1, 6)[0];
    if (values[1] - 0 == 0 || isNaN(values[1] - 0)) {
        return null;
    }
    if (values[3]) {
        var ingredients = splitIngredients(values[3]);
    } else {
        var ingredients = [];
    }
    return {
        name: values[0],
        quantity: values[1],
        time: values[2],
        ingredients: ingredients,
        speedMultiplier: values[4],
        machine: values[5]
    };
}

	//here, it makes the var "item" equal to "selectedItem", or the item that was selected
	//the if loop just checks if "amount" has a value, if not, then it makes "amount" equal to "item.quantity", or the quantity of that item when crafted
var item = selectedItem();

    if (!amount) {
        amount = item.quantity;
    }

	//it makes a var called "totals" equal to nothing at the moment and also adds the text of the vars "sheet", "item", "amount", "time", "1", and "totals"
	//then, it also displays the totals in a for loop to display "sheet", "itemByName(name)", "totals[name]", "time", and "1"
	var totals = {};
    appendAssemblerRecursive(sheet, item, amount, time, 1, totals);
    sheet.appendRow(["", "Total:"]);
    for (name in totals) {
        appendAssembler(sheet, itemByName(name), totals[name], time, 1);
    }
	
	//all it does is add the text of "sheet", "itemByName(item.ingredients[i].name)", "(item.ingredients[i].amount / item.quantity) * amount, time, offset + 1", and "totals"
appendAssemblerRecursive(sheet, itemByName(item.ingredients[i].name), (item.ingredients[i].amount / item.quantity) * amount, time, offset + 1, totals);
	
	//it adds the text of "sheet", "item", "amount", "time", and "offset" as well as make the "totals" array equal to the length of "item.name" and equal to the value of
	//totals at "item.name" or "0" and also adds amount
	//then it runs a for loop that runs until "item.ingredients.length" is less than the var "i" and it constantly displays: 
	//"sheet, itemByName(item.ingredients[i].name), (item.ingredients[i].amount / item.quantity) * amount, time, offset + 1, totals"
    appendAssembler(sheet, item, amount, time, offset);
    totals[item.name] = (totals[item.name] || 0) + amount;
    for (var i = 0; i < item.ingredients.length; i++) {
        appendAssemblerRecursive(sheet, itemByName(item.ingredients[i].name), (item.ingredients[i].amount / item.quantity) * amount, time, offset + 1, totals);
    }

	//makes the var sheets and items equivilent to "SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Items")" and "sheet.getSheetValues(1, 2, sheet.getLastRow(), 1)" 
	//respectively, then runs a for loop for as long as "items.length" it greater than i
	//the for loop also constantly returns "itemByRow(i + 1)"
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Items");
    var items = sheet.getSheetValues(1, 2, sheet.getLastRow(), 1);
    for (var i = 0; i < items.length; i++) {
        if (items[i][0].toString().toLowerCase() == name.toLowerCase()) {
            return itemByRow(i + 1);
        }
    }
	
	//the function makes the var "ingredients" equal to everything in the ingredients string but seperates each word with a new line
	//then, it runs a for loop for as long as ingredients.length is greater than the var "i"
	//the for loop makes the var "parts" equal to "ingredients[i].split(" x ")" and makes the ith position in "ingredients" equal to 
	/*  amount: parts[0],
     */ name: parts[1]
	//then returns "ingredients"
function splitIngredients(ingredientsString) {
    var ingredients = ingredientsString.split("\n");
    for (var i = 0; i < ingredients.length; i++) {
        var parts = ingredients[i].split(" x ");
        ingredients[i] = {
            amount: parts[0],
            name: parts[1]
        }
    }
    return ingredients;
}
